<!DOCTYPE html>
<html>
<head>
   <link rel='stylesheet' href='../css/bootstrap.css' />
   <script src='../js/jquery-3.2.1.js'></script>
   <script src='../js/bootstrap.min.js'></script>
</head>

<body>
   <header>
      <% include template/header.ejs %>
   </header>

   <!--Gambiarra!!?!!-->
   <p id='result' hidden><%= results %></p>

   <div class='container mt-5'>

      <% var allKeys = [] %>
      <% var tmp = JSON.parse(results) %>
      <% for(var idx in tmp) { %>
      <%    var result = JSON.parse(tmp[idx].result) %>
      <%    const keys = Object.keys(result) %>
      <%    for(var key in keys) { %>
      <%       allKeys.push(keys[key]) %>
      <%    } %>
      <% } %>

      <% var unique = [...new Set(allKeys)]; %>

      <div id='btn-group' class='p-5'>
         <label class='mr-sm-2' for='inlineFormCustomSelect'>X Axis:</label>
         <select id='x-axis' class='custom-select mb-2 mr-sm-2 mb-sm-0'>
            <% for(var statistic in unique) { %>
            <option value='<%= unique[statistic] %>'><%= unique[statistic] %></option>
            <% } %>
         </select>

         <label class='mr-sm-2' for='inlineFormCustomSelect'>Y Axis:</label>
         <select id='y-axis' class='custom-select mb-2 mr-sm-2 mb-sm-0'>
            <% for(var statistic in unique) { %>
            <option value='<%= unique[statistic] %>'><%= unique[statistic] %></option>
            <% } %>
         </select>

         <div class='btn-group'>
            <button type='button' onclick='generateChart()' class='btn btn-success' aria-haspopup='true' aria-expanded='false'>
               Plot
            </button>
         </div>
      </div>

      <% include template/footer.ejs %>
   </div> <!-- /container -->

   <script src='https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.6.0/Chart.bundle.js'></script>
   <script>
      function generateChart() {

         var results = JSON.parse( document.getElementById( 'result' ).innerHTML );
         //<%- results %> try this latter on...

         // Retrieve x axis and y axis chosen by user
         var x_axis = document.getElementById( 'x-axis' );
         var y_axis = document.getElementById( 'y-axis' );

         if ( ( x_axis.options[x_axis.selectedIndex] === undefined ) || ( y_axis.options[y_axis.selectedIndex] === undefined ) ) {
            // No values so far;
            return;
         }

         var x_axisValue = x_axis.options[x_axis.selectedIndex].value;
         var y_axisValue = y_axis.options[y_axis.selectedIndex].value;

         var simulations = [];

         for ( var idx in results ) {

            const simulationId = results[idx]._simulation._id;
            const result = JSON.parse( results[idx].result );

            if ( simulations[simulationId] === undefined ) {
               simulations[simulationId] = [];
            }

            simulations[simulationId].push( result );
         }

         var datasets = [];

         for ( var simulation in simulations ) {

            var x_axes = [];
            var y_axes = [];

            var sampleX = {};
            var sampleY = {};

            for ( var idx in simulations[simulation] ) {

               var result = simulations[simulation][idx];

               insertSampleValue( sampleX, result['Load'], result[x_axisValue] );
               insertSampleValue( sampleY, result['Load'], result[y_axisValue] );
            }

            var data = [];

            // Compute mean for each axis (sampleX = sampleY)
            for ( var key in sampleX ) {

               var meanX = 0;

               for ( var value in sampleX[key] ) {
                  meanX += sampleX[key][value];
               }

               // Values to calculate confidence interval
               var greaterY = 0;
               var lesserY = Number.MAX_SAFE_INTEGER;

               var meanY = 0;

               for ( var value in sampleY[key] ) {
                  meanY += sampleY[key][value];
               }

               const sample = {
                  x: meanX / sampleX[key].length,
                  y: meanY / sampleY[key].length
               }

               data.push( sample );

               // Label
               x_axes.push( meanX / sampleX[key].length );
            }

            const r = Math.floor( Math.random() * 255 );
            const g = Math.floor( Math.random() * 255 );
            const b = Math.floor( Math.random() * 255 );

            datasets.push( {
               'label': results[0]._simulation.name, // Simulation name
               'backgroundColor': 'rgb(' + r + ',' + g + ',' + b + ')',
               'borderColor': 'rgb(' + r + ',' + g + ',' + b + ')',
               'data': data,
               'fill': false,
            })
         }

         // Plot chart
         var canvas = document.createElement( 'canvas' );
         canvas.className = 'my-5';
         var buttonGroup = document.getElementById( 'btn-group' );
         buttonGroup.insertBefore( canvas, buttonGroup.childNodes[0] );

         var chart = new Chart( canvas, {
            'type': 'line',
            'data': {
               'labels': x_axes,
               'datasets': datasets
            },
            'options': {
               'responsive': true,
               'tooltips': {
                  'mode': 'index',
                  'intersect': false,
               },
               'hover': {
                  'mode': 'nearest',
                  'intersect': true
               },
               'scales': {
                  'xAxes': [{
                     'display': true,
                     'scaleLabel': {
                        'display': true,
                        'labelString': x_axisValue
                     }
                  }],
                  'yAxes': [{
                     'display': true,
                     'scaleLabel': {
                        'display': true,
                        'labelString': y_axisValue
                     }
                  }]
               }
            }
         });
      }

      function insertSampleValue( array, key, value ) {
         if ( array[key] === undefined ) {
            array[key] = [];
         }

         array[key].push( value );
      }
   </script>
</body>

</html>