<!DOCTYPE html>
<html>
<head>
   <link rel='stylesheet' href='../css/bootstrap.css' />
   <script src='../js/jquery-3.2.1.js'></script>
   <script src='../js/bootstrap.min.js'></script>
</head>

<body>
   <header>
      <% include template/header.ejs %>
   </header>

   <!--Gambiarra!!?!!-->
   <p id='result' hidden><%= results %></p>

   <div class='container mt-5'>

      <% var allKeys = [] %>
      <% var tmp = JSON.parse(results) %>
      <% for(var idx in tmp) { %>
      <%    var result = JSON.parse(tmp[idx].result) %>
      <%    const keys = Object.keys(result) %>
      <%    for(var key in keys) { %>
      <%       allKeys.push(keys[key]) %>
      <%    } %>
      <% } %>

      <% var unique = [...new Set(allKeys)]; %>

      <div id='btn-group' class='p-5'>
         <label class='mr-sm-2' for='inlineFormCustomSelect'>X Axis:</label>
         <select id='x-axis' class='custom-select mb-2 mr-sm-2 mb-sm-0'>
            <% for(var statistic in unique) { %>
            <option value='<%= unique[statistic] %>'><%= unique[statistic] %></option>
            <% } %>
         </select>

         <label class='mr-sm-2' for='inlineFormCustomSelect'>Y Axis:</label>
         <select id='y-axis' class='custom-select mb-2 mr-sm-2 mb-sm-0'>
            <% for(var statistic in unique) { %>
            <option value='<%= unique[statistic] %>'><%= unique[statistic] %></option>
            <% } %>
         </select>

         <div class='btn-group'>
            <button type='button' onclick='generateChart()' class='btn btn-success' aria-haspopup='true' aria-expanded='false'>
               Plot
            </button>
         </div>
      </div>

      <% include template/footer.ejs %>
   </div> <!-- /container -->

   <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
   <script>
      google.charts.load( 'current', { 'packages': ['corechart'] });

      function generateChart() {

         var results = JSON.parse( document.getElementById( 'result' ).innerHTML );
         //<%- results %> try this latter on...

         // Retrieve x axis and y axis chosen by user
         var x_axis = document.getElementById( 'x-axis' );
         var y_axis = document.getElementById( 'y-axis' );

         if ( ( x_axis.options[x_axis.selectedIndex] === undefined ) || ( y_axis.options[y_axis.selectedIndex] === undefined ) ) {
            // No values so far;
            return;
         }

         var x_axisValue = x_axis.options[x_axis.selectedIndex].value;
         var y_axisValue = y_axis.options[y_axis.selectedIndex].value;

         var simulations = [];

         for ( var idx in results ) {

            const simulationId = results[idx]._simulation._id;
            const result = JSON.parse( results[idx].result );

            if ( simulations[simulationId] === undefined ) {
               simulations[simulationId] = [];
            }

            simulations[simulationId].push( result );
         }

         var simIdx = 0;

         for ( var simulation in simulations ) {

            var data = new google.visualization.DataTable();

            data.addColumn( 'number', results[simIdx]._simulation.name );
            data.addColumn( 'number', results[simIdx]._simulation.name );
            ++simIdx;

            var rows = [];
            var greater = 0;

            loop:
            for ( var idx in simulations[simulation] ) {

               var result = simulations[simulation][idx];

               for ( var row in rows ) {

                  if ( result[x_axisValue] === rows[row][0] ) {
                     rows[row].push( result[y_axisValue] );

                     if ( rows[row].length > greater ) {
                        greater = rows[row].length;
                     }

                     continue loop;
                  }
               }

               rows.push( [result[x_axisValue], result[y_axisValue]] );
            }

            if ( greater > 0 ) {

               for ( var i = 0; i < greater - 2; ++i ) {
                  data.addColumn( { type: 'number', role: 'interval' });
               }

               for ( row in rows ) {

                  // Compute average
                  var subArray = rows[row].slice( 1, rows[row].length );

                  var total = 0;

                  for ( var i = 0; i < subArray.length; ++i ) {
                     total += subArray[i];
                  }

                  const average = total / subArray.length;

                  rows[row][1] = average;

                  // Fill with null
                  if ( rows[row].length < greater ) {

                     var diff = greater - rows[row].length;

                     for ( var i = 0; i < diff; ++i ) {
                        rows[row].push( null );
                     }
                  }
               }
            }

            data.addRows( rows );

            var options = {
               series: [{ 'color': '#' + Math.floor( Math.random() * 16777215 ).toString( 16 ) }],
               intervals: { style: 'boxes' },
               legend: 'none',
            };


            var div = document.createElement( 'div' );
            div.className = 'my-5';
            var buttonGroup = document.getElementById( 'btn-group' );
            buttonGroup.insertBefore( div, buttonGroup.childNodes[0] );

            var chart_lines = new google.visualization.LineChart( div );
            chart_lines.draw( data, options );
         }
      }

   </script>
</body>

</html>