<!DOCTYPE html>
<html>
<head>
   <% include template/head.ejs %>
</head>

<body>
   <header>
      <% include template/header.ejs %>
   </header>

   <div id='container' class='container'>

   </div>

   <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
   <script>
      google.charts.load( 'current', { 'packages': ['gauge'] });
      google.charts.setOnLoadCallback( generateChart );

      var workerAddresses = [];

      function generateChart() {

         drawChart();
         setInterval( drawChart, 1000 );
      }

      function drawChart() {

         const xmlhttp = new XMLHttpRequest();

         xmlhttp.onreadystatechange = function () {

            if ( xmlhttp.readyState == 4 && xmlhttp.status == 200 ) {

               const workers = JSON.parse( xmlhttp.response );

               var activeWorkers = [];

               const container = document.getElementById( 'container' );

               for ( var idx = 0; idx < workers.length; ++idx ) {

                  var div;

                  if ( ( div = document.getElementById( workers[idx].address ) ) === null ) {

                     workerAddresses.push( workers[idx].address );
                     activeWorkers.push( workers[idx].address );

                     mainDiv = document.createElement( 'div' );
                     mainDiv.style = 'width: 50%; margin: 0 auto;';
                     mainDiv.id = 'main_' + workers[idx].address;

                     ip = document.createElement( 'h1' );
                     ip.innerHTML = workers[idx].address;
                     mainDiv.appendChild( ip );

                     runningInstance = document.createElement( 'h3' );
                     runningInstance.innerHTML = 'Running instances: ' + workers[idx].runningInstances;
                     runningInstance.id = 'ri_' + workers[idx].address;
                     mainDiv.appendChild( runningInstance );

                     div = document.createElement( 'div' );
                     div.id = workers[idx].address;
                     mainDiv.appendChild( div );

                     hr = document.createElement( 'hr' );
                     mainDiv.appendChild( hr );

                     container.appendChild( mainDiv );

                  } else {
                     activeWorkers.push( workers[idx].address );

                     runningInstance = document.getElementById( 'ri_' + workers[idx].address );
                     runningInstance.innerHTML = 'Running instances: ' + workers[idx].runningInstances;
                  }

                  var data = google.visualization.arrayToDataTable( [
                     ['Label', 'Value'],
                     ['Memory', ( 1 - workers[idx].lastResource.memory ) * 100],
                     ['CPU', ( 1 - workers[idx].lastResource.cpu ) * 100]
                  ] );

                  var options = {
                     width: 400, height: 120,
                     redFrom: 90, redTo: 100,
                     yellowFrom: 75, yellowTo: 90,
                     minorTicks: 5
                  };

                  var chart = new google.visualization.Gauge( div );
                  chart.draw( data, options );
               }

               for ( var idx = 0; idx < workerAddresses.length; ++idx ) {

                  var found = activeWorkers.indexOf( workerAddresses[idx] );

                  if ( found === -1 ) {

                     const div = document.getElementById( 'main_' + workerAddresses[idx] );
                     div.remove();

                     workerAddresses.splice( idx, 1 );
                  }
               }
            }
         }

         xmlhttp.open( 'GET', '/workers', true );
         xmlhttp.send();
      }
   </script>

</body>

</html>
<footer>
   <% include template/footer.ejs %>
</footer>