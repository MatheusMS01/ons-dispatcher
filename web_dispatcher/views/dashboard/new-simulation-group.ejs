<!DOCTYPE html>
<html>

<head>
  <% include ../template/head.ejs %>
</head>


<body>
  <header>
    <% include ../template/header.ejs %>
  </header>

  <div id="wrapper">

    <% include template/sidebar.ejs %>

    <div id="page-wrapper" style="min-height: 898px;">
      <div class="row">
        <div class="col-lg-12">
          <h1 class="page-header">New Simulation Group</h1>
        </div>
        <% if(error_msg.length > 0) { %>
        <div class="modal fade" id="errorModal" role="dialog">
          <div class="modal-dialog">
            <div class="modal-content">
              <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Error</h4>
              </div>
              <div class="modal-body">
                <p><%- locals.error_msg %></p>
              </div>
              <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
              </div>
            </div>
          </div>
        </div>

        <script type="text/javascript">
          $( window ).on( 'load', function () {
            $( '#errorModal' ).modal( 'show' );
          } );
        </script>
        <% } %>

        <div style="padding: 2%">
          <form method='post' enctype='multipart/form-data' action='/new_simulation'>

            <div class='form-group row'>
              <label class='col-2 col-form-label'>Simulation Group Name</label>
              <div>
                <input class='form-control' type='text' name='simulationGroupName'>
              </div>
            </div>

            <div class='form-group row'>
              <label class='col-2 col-form-label'>Seed Amount</label>
              <div>
                <input class='form-control' type='number' name='seedAmount'>
              </div>
            </div>

            <div class='form-group row'>
              <label class='col-2 col-form-label'>Minimum load</label>
              <div>
                <input class='form-control' type='number' name='minLoad'>
              </div>
            </div>

            <div class='form-group row'>
              <label class='col-2 col-form-label'>Maximum load</label>
              <div>
                <input class='form-control' type='number' name='maxLoad'>
              </div>
            </div>

            <div class='form-group row'>
              <label class='col-2 col-form-label'>Step</label>
              <div>
                <input class='form-control' type='number' name='step'>
              </div>
            </div>

            <div class="checkbox">
              <label data-toggle="popover" data-trigger="hover" data-content="This will lock your simulator and you will be able to select multiple configuration documents at once" data-placement="top"><input id="cb-same-simulator" type='checkbox' name='sameSimulator' onclick="check(this)">Use same simulator</label>
            </div>

            <div id='btn-group'>
              <button id='btn-new-simulation' type='button' onclick='newSimulation()' class='btn btn-primary' name="newSimulationBtn">New simulation</button>

              <button type='submit' class='btn btn-primary'>Submit</button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>

  <script>
    var simulationCount = 0;

    function newSimulation() {

      var myId = simulationCount++;

      var cb = document.getElementById( 'cb-same-simulator' );

      if ( simulationCount > 1 ) {
        cb.disabled = true;
      }

      var btnGroup = document.getElementById( 'btn-group' );

      var div = document.createElement( 'div' );
      div.className = 'jumbotron';
      div.style = 'padding: 2%';

      if ( myId !== 0 ) {
        var closeBtn = document.createElement( 'button' );
        closeBtn.type = 'button';
        closeBtn.className = 'close';
        closeBtn.setAttribute( 'aria-label', 'close' );
        closeBtn.innerHTML = '<span aria-hidden="true">&times;</span>';
        closeBtn.style = 'color: red';
        closeBtn.onclick = function () {

          div.remove();
          simulationCount--;

          if ( simulationCount === 1 ) {
            var cb = document.getElementById( 'cb-same-simulator' );
            cb.disabled = false;
          }
        }

        div.insertAdjacentElement( 'beforeend', closeBtn );
      }

      var simulatorDiv = document.createElement( 'div' );

      var simulatorNameLbl = document.createElement( 'label' );
      simulatorNameLbl.innerHTML = 'Simulation name';

      var simulatorNameInput = document.createElement( 'input' );
      simulatorNameInput.className = 'form-control';
      simulatorNameInput.type = 'text';
      simulatorNameInput.name = 'simulationName';

      // < Simulator input >
      var simulatorInputDiv = document.createElement( 'div' );
      simulatorInputDiv.className = 'input-group'
      simulatorInputDiv.style = 'margin-top: 10px';

      var simulatorInputLbl = document.createElement( 'label' );
      simulatorInputLbl.className = 'input-group-btn';

      var simulatorInputSpan = document.createElement( 'span' );
      simulatorInputSpan.className = 'btn btn-primary';
      simulatorInputSpan.innerHTML = 'Simulator';
      simulatorInputSpan.style = 'min-width: 120px';

      var simulatorInput = document.createElement( 'input' );
      simulatorInput.type = 'file';
      simulatorInput.style = 'display: none;';
      simulatorInput.name = 'simulator';
      simulatorInput.accept = '.jar';

      var simulatorInputDisplay = document.createElement( 'input' );
      simulatorInputDisplay.type = 'text';
      simulatorInputDisplay.className = 'form-control';
      simulatorInputDisplay.readOnly = true;

      simulatorInputSpan.insertAdjacentElement( 'beforeend', simulatorInput );
      simulatorInputLbl.insertAdjacentElement( 'beforeend', simulatorInputSpan );

      simulatorInputDiv.insertAdjacentElement( 'beforeend', simulatorInputLbl );
      simulatorInputDiv.insertAdjacentElement( 'beforeend', simulatorInputDisplay );

      // </ Simulator input >

      simulatorDiv.insertAdjacentElement( 'beforeend', simulatorNameLbl );
      simulatorDiv.insertAdjacentElement( 'beforeend', simulatorNameInput );
      simulatorDiv.insertAdjacentElement( 'beforeend', simulatorInputDiv );

      // < Configuration input >
      var configurationInputDiv = document.createElement( 'div' );
      configurationInputDiv.className = 'input-group'
      configurationInputDiv.style = 'margin-top: 10px';

      var configurationInputLbl = document.createElement( 'label' );
      configurationInputLbl.className = 'input-group-btn';

      var configurationInputSpan = document.createElement( 'span' );
      configurationInputSpan.className = 'btn btn-primary';
      configurationInputSpan.innerHTML = 'Configuration';
      configurationInputSpan.style = 'min-width: 120px';

      var configurationInput = document.createElement( 'input' );
      configurationInput.type = 'file';
      configurationInput.style = 'display: none;';
      configurationInput.name = 'configuration';
      configurationInput.accept = '.xml,.json';

      var configurationInputDisplay = document.createElement( 'input' );
      configurationInputDisplay.type = 'text';
      configurationInputDisplay.className = 'form-control';
      configurationInputDisplay.readOnly = true;
      configurationInputDisplay.name = 'configurationDisplay'

      configurationInputSpan.insertAdjacentElement( 'beforeend', configurationInput );
      configurationInputLbl.insertAdjacentElement( 'beforeend', configurationInputSpan );

      configurationInputDiv.insertAdjacentElement( 'beforeend', configurationInputLbl );
      configurationInputDiv.insertAdjacentElement( 'beforeend', configurationInputDisplay );

      // </ Configuration input >

      div.insertAdjacentElement( 'beforeend', simulatorDiv );
      div.insertAdjacentElement( 'beforeend', configurationInputDiv );

      btnGroup.insertAdjacentElement( 'beforebegin', div );
    }

    function check( checkbox ) {

      var configurationInput = document.getElementsByName( 'configuration' )[0];
      var newSimulationBtn = document.getElementsByName( 'newSimulationBtn' )[0];
      var configurationDisplay = document.getElementsByName( 'configurationDisplay' )[0];

      if ( checkbox.checked ) {
        configurationInput.setAttribute( 'multiple', '' );
        configurationInput.value = '';
        configurationDisplay.value = '';
        newSimulationBtn.disabled = true;
      } else {
        configurationInput.removeAttribute( 'multiple' );
        configurationInput.value = '';
        configurationDisplay.value = '';
        newSimulationBtn.disabled = false;
      }

    }

    // window.onload = newSimulation;

    var prev_handler = window.onload;
    window.onload = function () {
      if ( prev_handler ) {
        prev_handler();
      }

      newSimulation();
    };

    $( function () {
      $( document ).on( 'change', ':file', function () {
        var input = $( this );
        var numFiles = input.get( 0 ).files ? input.get( 0 ).files.length : 1;
        var label = input.val().replace( /\\/g, '/' ).replace( /.*\//, '' );
        var input2 = $( this ).parents( '.input-group' ).find( ':text' ),
          log = numFiles > 1 ? numFiles + ' files selected' : label;
        if ( input2.length ) {
          input2.val( log );
        } else {
          if ( log ) alert( log );
        }
      } );
    } );

    $( document ).ready( function () {
      $( '[data-toggle="popover"]' ).popover();
    } );
  </script>

  <script src='../js/sb-admin-2.js'></script>

</body>

</html>
<footer>
  <% include ../template/footer.ejs %>
</footer>