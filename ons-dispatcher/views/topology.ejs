<!DOCTYPE html>
<html>
<head>
    <title>Optical Network Simulator</title>
    <link href="/css/styles.css" rel="stylesheet" type="text/css">
</head>

<body>
    <header>
        <div class="nav-title">
            <a class="nav-title"href="#">Optical Network Simulation</a>
        </div>
        <nav>
            <a href="#">Home</a>
            <a href="#">Simulation</a>
            <a href="#">Downloads</a>
            <a href="#">About Us</a>
            <a href="#">Contact</a>
        </nav>
    </header>
    <div id="main-container">
        <div id="tools-container">
            <button onclick="finish()">Finish</button>
        </div>
        <div id="topology-container"></div>
    </div>

    <script src="/javascripts/utils/sigma.min.js"></script>
    <script src="/javascripts/utils/plugins/sigma.plugins.dragNodes/sigma.plugins.dragNodes.js"></script>
    <script src="/javascripts/utils/XMLWriter.js"></script>
    <script>
       // Initialize variables
       var nodeId = 0,
           edgeId = 0,
           nodeIdList = [],
           xmlWriter = new XMLWriter('UTF-8', '1.0');

       // These are information that will be necessary to generate the xml file
       var nodeList = [],
           edgeList = [];

       sigmaInstance = new sigma({
            renderer: {
                container: document.getElementById('topology-container'),
                type: 'canvas'
            },
            settings: {
                doubleClickEnabled: false,
                minEdgeSize: 0.5,
                maxEdgeSize: 4,
                enableEdgeHovering: true,
                edgeHoverSizeRatio: 1,
                edgeHoverExtremities: true,
            }
        });

       var dragListener = sigma.plugins.dragNodes(sigmaInstance, sigmaInstance.renderers[0]);

       dragListener.bind('startdrag', function(event) {
          console.log(event);
       });
       dragListener.bind('drag', function(event) {
          console.log(event);
       });
       dragListener.bind('drop', function(event) {
          console.log(event);
       });
       dragListener.bind('dragend', function(event) {
          console.log(event);
       });

       sigmaInstance.bind('clickNode', function(e) {
          if(nodeIdList.length >= 2) {
             nodeIdList = [];
          }

          /* If user clicks the node, and it's the first one push it to the list in order to create the edge between
            two nodes */
          nodeIdList.push(e.data.node.id);

          // If it is the second one already, create the edge
          if(nodeIdList.length === 2) {
             // Do not create self links
             if(nodeIdList[0] === nodeIdList[1]) {
                nodeIdList = [];
                return;
             }
             // TODO: if the link already exists, do not create it either
             ++edgeId;
             sigmaInstance.graph.addEdge({
                id: edgeId,
                source: nodeIdList[0],
                target: nodeIdList[1]
             });
          }
          sigmaInstance.refresh();
       })

       // New Node
       sigmaInstance.bind('doubleClickStage', function(e) {
          nodeIdList = [];

          var x, y;

          x = sigma.utils.getX(e.data.captor);
          y = sigma.utils.getY(e.data.captor);

          ++nodeId;
          sigmaInstance.graph.addNode({
             id: nodeId,
             size: 50,
             label: nodeId + '',
             x: x,
             y: y,
             dX: 0,
             dY: 0
          });

          nodeList.push({id: nodeId, groomingInPorts: 15, groomingOutPorts: 15});
          
          sigmaInstance.refresh();
       });

    sigmaInstance.bind('clickStage', function (e) {
       if(nodeIdList.length === 1) {
          nodeIdList = [];
       }
    });

    sigmaInstance.bind('rightClickStage', function (e) {

    });

    function finish() {
       var parser = new DOMParser();
       var dom = parser.parseFromString(xmlWriter.flush(), "text/xml");

       alert(dom);

    }

    </script>
</body>

<footer>
</footer>
</html>